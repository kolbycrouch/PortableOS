set -e 
set -o pipefail
build-musl () { cd musl && . make.musl && cd $TOPDIR/toolchain; }
build-kernel-headers () { cd kernel-headers && . make.kernel-headers && cd $TOPDIR/toolchain; }
build-glibc () { cd glibc && . make.glibc && cd $TOPDIR/toolchain; }
build-gmp () { cd gmp && . make.gmp && cd $TOPDIR/toolchain; }
build-mpfr () { cd mpfr && . make.mpfr && cd $TOPDIR/toolchain; }
build-mpc () { cd mpc && . make.mpc && cd $TOPDIR/toolchain; }
build-libressl () { cd libressl && . make.libressl && cd $TOPDIR/toolchain; }
build-binutils () { cd binutils && . make.binutils && cd $TOPDIR/toolchain; }
build-gcc () { cd gcc && . make.gcc && cd $TOPDIR/toolchain; }
build-gettext () { cd gettext && . make.gettext && cd $TOPDIR/toolchain; }
build-diff () { cd diff && . make.diff && cd $TOPDIR/toolchain; }
build-make () { cd make && . make.make && cd $TOPDIR/toolchain; }
build-patch () { cd patch && . make.patch && cd $TOPDIR/toolchain; }
build-ncurses () { cd ncurses && . make.ncurses && cd $TOPDIR/toolchain; }
build-zlib () { cd zlib && . make.zlib && cd $TOPDIR/toolchain; }
build-bzip () { cd bzip && . make.bzip && cd $TOPDIR/toolchain; }
build-libarchive () { cd libarchive && . make.libarchive && cd $TOPDIR/toolchain; }
make-package () { . make.pkg; }


if [ "$1" == "-h" ] || [ "$1" == "--help" ] || [ "$1" == "-help" ] || [ "$1" == "help" ] || [ "$1" == "" ]; then
	echo "Usage: make.toolchain "component" | maketoolchain -a"
	echo ""
	echo "make.toolchain either needs a specified component or to build the entire toolchain."
	echo ""
	echo "Components available: kernel-headers musl glibc gmp mpfr mpc libressl binutils gcc gettext diff make patch ncurses zlib bzip libarchive"
	exit 0
elif [ "$1" == "-a" ] || [ "$1" == "--all" ] || [ "$1" == "all" ]; then
	shift
	build-kernel-headers
	
	if [[ "$MACHARCH" =~ .*gnu ]]; then
		build-glibc
	elif [[ "$MACHARCH" =~ .*musl ]]; then
		build-musl
	else
		echo "You must specify a valid tuple in the configuration at the start of this file"
		echo "Read the file "tuples.valid" to see a list of valid tuples"
		exit 1
	fi

	build-gmp &&
	build-mpfr &&
	build-mpc &&
	build-libressl &&
	build-binutils &&
	build-gcc &&	

	## This is the start of the second bootstrap phase for the toolchain.
	## We simply reconfigure some environment variables and rebuild compiler and linker.

	export CC=${FINPREFIX}/bin/gcc
	export CXX=${FINPREFIX}/bin/g++
	export LIBRARY_PATH=${FINPREFIX}/lib
	export PKG_CONFIG_LIBDIR=${FINPREFIX}/lib/pkgconfig
	export HOSTARCH=${MACHARCH}
	export PATH=${FINPREFIX}/bin:${FINPREFIX}/sbin:${PATH}
	
	##
	##
	
	export CFLAGS="-O2 -pipe -B${FINPREFIX}"
	export CXXFLAGS="-O2 -pipe -B${FINPREFIX}"
	build-gmp &&
	build-mpfr &&	
	build-mpc &&
	build-gcc &&
	unset CFLAGS
	unset CXXFLAGS
        if [[ "$MACHARCH" =~ .*gnu ]]; then
                build-glibc
        else 
                build-musl
        fi
	build-libressl &&
	build-binutils &&
	build-gettext &&
	build-diff &&
	build-make &&
	build-patch &&
	build-ncurses &&
	build-zlib &&
	build-bzip &&
	build-libarchive &&
	echo "Build Successful!"
elif [ "$1" == "kernel-headers" ]; then
	shift
	source make.config
	build-kernel-headers
	echo "Built kernel-headers!"
	exit 0
elif [ "$1" == "musl" ]; then
        build-musl
        echo "Built Musl Libc!"
        exit 0
elif [ "$1" == "glibc" ]; then
	shift
	source make.config
        build-glibc
        echo "Built GNU Libc!"
        exit 0
elif [ "$1" == "gmp" ]; then
        build-gmp
        echo "Built GMP!"
        exit 0
elif [ "$1" == "mpfr" ]; then
        build-mpfr
        echo "Built MPFR!"
        exit 0
elif [ "$1" == "mpc" ]; then
        build-mpc
        echo "Built MPC!"
        exit 0
elif [ "$1" == "libressl" ]; then
        build-libressl
        echo "Built LibreSSL!"
        exit 0
elif [ "$1" == "binutils" ]; then
        build-binutils
        echo "Built GNU Binutils!"
        exit 0
elif [ "$1" == "gettext" ]; then
        build-gettext
        echo "Built Gettext!"
        exit 0
elif [ "$1" == "diff" ]; then
        build-diff
        echo "Built GNU Diff!"
        exit 0
elif [ "$1" == "make" ]; then
        build-make
        echo "Built GNU Make!"
        exit 0
elif [ "$1" == "patch" ]; then
        build-patch
        echo "Built GNU Patch!"
        exit 0
elif [ "$1" == "ncurses" ]; then
        build-ncurses
        echo "Built Ncurses!"
        exit 0
elif [ "$1" == "zlib" ]; then
        build-zlib
        echo "Built Zlib!"
        exit 0
elif [ "$1" == "bzip" ]; then
        build-bzip
        echo "Built Bzip!"
        exit 0
elif [ "$1" == "libarchive" ]; then
        build-libarchive
        echo "Built Libarchive!"
        exit 0
elif [ "$1" == "gcc" ]; then
        build-gcc
        echo "Built GCC!"
        exit 0
else
	echo "Invalid component specified, see -h for Usage"
	exit 1
fi

